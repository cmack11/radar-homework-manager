// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`initialization should initialize the AddForm 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddForm
    show={true}
    subjectNames={
      Array [
        "Subject #1",
        "Subject #2",
        "Subject #3",
      ]
    }
    taskTypes={
      Array [
        "Type #1",
        "Type #2",
        "Type #3",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Connect(SubjectForm)
        show={true}
        subjectNames={
          Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ]
        }
        switchForm={[Function]}
        taskTypes={
          Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ]
        }
        width={320}
      />,
      "id": "subjectButton",
      "style": Object {
        "left": 0,
        "position": "absolute",
        "top": 0,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "closeForm": undefined,
        "show": true,
        "subjectNames": Array [
          "Subject #1",
          "Subject #2",
          "Subject #3",
        ],
        "switchForm": [Function],
        "taskTypes": Array [
          "Type #1",
          "Type #2",
          "Type #3",
        ],
        "width": 320,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Connect(SubjectForm)
          show={true}
          subjectNames={
            Array [
              "Subject #1",
              "Subject #2",
              "Subject #3",
            ]
          }
          switchForm={[Function]}
          taskTypes={
            Array [
              "Type #1",
              "Type #2",
              "Type #3",
            ]
          }
          width={320}
        />,
        "id": "subjectButton",
        "style": Object {
          "left": 0,
          "position": "absolute",
          "top": 0,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "closeForm": undefined,
          "show": true,
          "subjectNames": Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ],
          "switchForm": [Function],
          "taskTypes": Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ],
          "width": 320,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`initialization should not alter the form 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddForm
    show={true}
    subjectNames={
      Array [
        "Subject #1",
        "Subject #2",
        "Subject #3",
      ]
    }
    taskTypes={
      Array [
        "Type #1",
        "Type #2",
        "Type #3",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Connect(SubjectForm)
        show={true}
        subjectNames={
          Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ]
        }
        switchForm={[Function]}
        taskTypes={
          Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ]
        }
        width={320}
      />,
      "id": "subjectButton",
      "style": Object {
        "left": 0,
        "position": "absolute",
        "top": 0,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "closeForm": undefined,
        "show": true,
        "subjectNames": Array [
          "Subject #1",
          "Subject #2",
          "Subject #3",
        ],
        "switchForm": [Function],
        "taskTypes": Array [
          "Type #1",
          "Type #2",
          "Type #3",
        ],
        "width": 320,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Connect(SubjectForm)
          show={true}
          subjectNames={
            Array [
              "Subject #1",
              "Subject #2",
              "Subject #3",
            ]
          }
          switchForm={[Function]}
          taskTypes={
            Array [
              "Type #1",
              "Type #2",
              "Type #3",
            ]
          }
          width={320}
        />,
        "id": "subjectButton",
        "style": Object {
          "left": 0,
          "position": "absolute",
          "top": 0,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "closeForm": undefined,
          "show": true,
          "subjectNames": Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ],
          "switchForm": [Function],
          "taskTypes": Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ],
          "width": 320,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`initialization should not show the AddForm by returning null 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddForm
    subjectNames={
      Array [
        "Subject #1",
        "Subject #2",
        "Subject #3",
      ]
    }
    taskTypes={
      Array [
        "Type #1",
        "Type #2",
        "Type #3",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`initialization should switch the form and then switch back 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddForm
    show={true}
    subjectNames={
      Array [
        "Subject #1",
        "Subject #2",
        "Subject #3",
      ]
    }
    taskTypes={
      Array [
        "Type #1",
        "Type #2",
        "Type #3",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Connect(TaskForm)
        show={true}
        subjectNames={
          Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ]
        }
        switchForm={[Function]}
        taskTypes={
          Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ]
        }
        width={320}
      />,
      "id": "subjectButton",
      "style": Object {
        "left": 0,
        "position": "absolute",
        "top": 0,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "closeForm": undefined,
        "show": true,
        "subjectNames": Array [
          "Subject #1",
          "Subject #2",
          "Subject #3",
        ],
        "switchForm": [Function],
        "taskTypes": Array [
          "Type #1",
          "Type #2",
          "Type #3",
        ],
        "width": 320,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Connect(TaskForm)
          show={true}
          subjectNames={
            Array [
              "Subject #1",
              "Subject #2",
              "Subject #3",
            ]
          }
          switchForm={[Function]}
          taskTypes={
            Array [
              "Type #1",
              "Type #2",
              "Type #3",
            ]
          }
          width={320}
        />,
        "id": "subjectButton",
        "style": Object {
          "left": 0,
          "position": "absolute",
          "top": 0,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "closeForm": undefined,
          "show": true,
          "subjectNames": Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ],
          "switchForm": [Function],
          "taskTypes": Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ],
          "width": 320,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`initialization should switch the form and then switch back 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AddForm
    show={true}
    subjectNames={
      Array [
        "Subject #1",
        "Subject #2",
        "Subject #3",
      ]
    }
    taskTypes={
      Array [
        "Type #1",
        "Type #2",
        "Type #3",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Connect(SubjectForm)
        show={true}
        subjectNames={
          Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ]
        }
        switchForm={[Function]}
        taskTypes={
          Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ]
        }
        width={320}
      />,
      "id": "subjectButton",
      "style": Object {
        "left": 0,
        "position": "absolute",
        "top": 0,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "closeForm": undefined,
        "show": true,
        "subjectNames": Array [
          "Subject #1",
          "Subject #2",
          "Subject #3",
        ],
        "switchForm": [Function],
        "taskTypes": Array [
          "Type #1",
          "Type #2",
          "Type #3",
        ],
        "width": 320,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Connect(SubjectForm)
          show={true}
          subjectNames={
            Array [
              "Subject #1",
              "Subject #2",
              "Subject #3",
            ]
          }
          switchForm={[Function]}
          taskTypes={
            Array [
              "Type #1",
              "Type #2",
              "Type #3",
            ]
          }
          width={320}
        />,
        "id": "subjectButton",
        "style": Object {
          "left": 0,
          "position": "absolute",
          "top": 0,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "closeForm": undefined,
          "show": true,
          "subjectNames": Array [
            "Subject #1",
            "Subject #2",
            "Subject #3",
          ],
          "switchForm": [Function],
          "taskTypes": Array [
            "Type #1",
            "Type #2",
            "Type #3",
          ],
          "width": 320,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
