// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`isValid Check Check if valid input gets submitted 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SubjectForm
    addSubject={[Function]}
    subjectNames={
      Array [
        "sub1",
        "sub2",
      ]
    }
    taskTypes={
      Array [
        "assignment",
        "exam",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Form
        as="form"
      >
        <div
          className="subject-title-container"
        >
          <b>
            Add Subject
          </b>
          <div
            className="switch-icon"
          >
            <Context.Provider
              value={
                Object {
                  "size": 20,
                }
              }
            >
              <MdRepeat />
            </Context.Provider>
          </div>
        </div>
        <FormField
          className="form-fields"
        >
          <label
            className="label-text label-center"
          >
            Subject Name
          </label>
          <input
            name="subjectName"
            onChange={[Function]}
            style={
              Object {
                "borderColor": null,
              }
            }
            type="text"
            value=""
          />
        </FormField>
        <FormField
          className="form-fields"
        >
          <label
            className="label-text"
          >
            Subject Description
          </label>
          <input
            name="subjectDesc"
            onChange={[Function]}
            type="text"
            value=""
          />
        </FormField>
        <FormField
          className="form-fields"
        >
          <label
            className="label-text"
          >
            Default Task Type
          </label>
          <select
            name="defaultTaskType"
            onChange={[Function]}
            value="Assignment"
          >
            <option
              value="assignment"
            >
              assignment
            </option>
            <option
              value="exam"
            >
              exam
            </option>
          </select>
        </FormField>
        <Button
          as="button"
          onClick={[Function]}
          primary={true}
          role="button"
          type="button"
          value="Submit"
        >
          Submit
        </Button>
      </Form>,
      "className": "subject-form",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "as": "form",
        "children": Array [
          <div
            className="subject-title-container"
          >
            <b>
              Add Subject
            </b>
            <div
              className="switch-icon"
            >
              <Context.Provider
                value={
                  Object {
                    "size": 20,
                  }
                }
              >
                <MdRepeat />
              </Context.Provider>
            </div>
          </div>,
          <FormField
            className="form-fields"
          >
            <label
              className="label-text label-center"
            >
              Subject Name
            </label>
            <input
              name="subjectName"
              onChange={[Function]}
              style={
                Object {
                  "borderColor": null,
                }
              }
              type="text"
              value=""
            />
          </FormField>,
          <FormField
            className="form-fields"
          >
            <label
              className="label-text"
            >
              Subject Description
            </label>
            <input
              name="subjectDesc"
              onChange={[Function]}
              type="text"
              value=""
            />
          </FormField>,
          <FormField
            className="form-fields"
          >
            <label
              className="label-text"
            >
              Default Task Type
            </label>
            <select
              name="defaultTaskType"
              onChange={[Function]}
              value="Assignment"
            >
              <option
                value="assignment"
              >
                assignment
              </option>
              <option
                value="exam"
              >
                exam
              </option>
            </select>
          </FormField>,
          <Button
            as="button"
            onClick={[Function]}
            primary={true}
            role="button"
            type="button"
            value="Submit"
          >
            Submit
          </Button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <b>
                Add Subject
              </b>,
              <div
                className="switch-icon"
              >
                <Context.Provider
                  value={
                    Object {
                      "size": 20,
                    }
                  }
                >
                  <MdRepeat />
                </Context.Provider>
              </div>,
            ],
            "className": "subject-title-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Add Subject",
              },
              "ref": null,
              "rendered": "Add Subject",
              "type": "b",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Context.Provider
                  value={
                    Object {
                      "size": 20,
                    }
                  }
                >
                  <MdRepeat />
                </Context.Provider>,
                "className": "switch-icon",
                "onClick": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <MdRepeat />,
                  "value": Object {
                    "size": 20,
                  },
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": [Circular],
                    "_calculateChangedBits": null,
                    "_currentRenderer": null,
                    "_currentRenderer2": null,
                    "_currentValue": Object {
                      "attr": undefined,
                      "className": undefined,
                      "color": undefined,
                      "size": undefined,
                      "style": undefined,
                    },
                    "_currentValue2": Object {
                      "attr": undefined,
                      "className": undefined,
                      "color": undefined,
                      "size": undefined,
                      "style": undefined,
                    },
                    "unstable_read": [Function],
                  },
                },
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <label
                className="label-text label-center"
              >
                Subject Name
              </label>,
              <input
                name="subjectName"
                onChange={[Function]}
                style={
                  Object {
                    "borderColor": null,
                  }
                }
                type="text"
                value=""
              />,
            ],
            "className": "form-fields",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Subject Name",
                "className": "label-text label-center",
              },
              "ref": null,
              "rendered": "Subject Name",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "subjectName",
                "onChange": [Function],
                "style": Object {
                  "borderColor": null,
                },
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <label
                className="label-text"
              >
                Subject Description
              </label>,
              <input
                name="subjectDesc"
                onChange={[Function]}
                type="text"
                value=""
              />,
            ],
            "className": "form-fields",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Subject Description",
                "className": "label-text",
              },
              "ref": null,
              "rendered": "Subject Description",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "name": "subjectDesc",
                "onChange": [Function],
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <label
                className="label-text"
              >
                Default Task Type
              </label>,
              <select
                name="defaultTaskType"
                onChange={[Function]}
                value="Assignment"
              >
                <option
                  value="assignment"
                >
                  assignment
                </option>
                <option
                  value="exam"
                >
                  exam
                </option>
              </select>,
            ],
            "className": "form-fields",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Default Task Type",
                "className": "label-text",
              },
              "ref": null,
              "rendered": "Default Task Type",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <option
                    value="assignment"
                  >
                    assignment
                  </option>,
                  <option
                    value="exam"
                  >
                    exam
                  </option>,
                ],
                "name": "defaultTaskType",
                "onChange": [Function],
                "value": "Assignment",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "assignment",
                    "value": "assignment",
                  },
                  "ref": null,
                  "rendered": "assignment",
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "exam",
                    "value": "exam",
                  },
                  "ref": null,
                  "rendered": "exam",
                  "type": "option",
                },
              ],
              "type": "select",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "button",
            "children": "Submit",
            "onClick": [Function],
            "primary": true,
            "role": "button",
            "type": "button",
            "value": "Submit",
          },
          "ref": null,
          "rendered": "Submit",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Form
          as="form"
        >
          <div
            className="subject-title-container"
          >
            <b>
              Add Subject
            </b>
            <div
              className="switch-icon"
            >
              <Context.Provider
                value={
                  Object {
                    "size": 20,
                  }
                }
              >
                <MdRepeat />
              </Context.Provider>
            </div>
          </div>
          <FormField
            className="form-fields"
          >
            <label
              className="label-text label-center"
            >
              Subject Name
            </label>
            <input
              name="subjectName"
              onChange={[Function]}
              style={
                Object {
                  "borderColor": null,
                }
              }
              type="text"
              value=""
            />
          </FormField>
          <FormField
            className="form-fields"
          >
            <label
              className="label-text"
            >
              Subject Description
            </label>
            <input
              name="subjectDesc"
              onChange={[Function]}
              type="text"
              value=""
            />
          </FormField>
          <FormField
            className="form-fields"
          >
            <label
              className="label-text"
            >
              Default Task Type
            </label>
            <select
              name="defaultTaskType"
              onChange={[Function]}
              value="Assignment"
            >
              <option
                value="assignment"
              >
                assignment
              </option>
              <option
                value="exam"
              >
                exam
              </option>
            </select>
          </FormField>
          <Button
            as="button"
            onClick={[Function]}
            primary={true}
            role="button"
            type="button"
            value="Submit"
          >
            Submit
          </Button>
        </Form>,
        "className": "subject-form",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "form",
          "children": Array [
            <div
              className="subject-title-container"
            >
              <b>
                Add Subject
              </b>
              <div
                className="switch-icon"
              >
                <Context.Provider
                  value={
                    Object {
                      "size": 20,
                    }
                  }
                >
                  <MdRepeat />
                </Context.Provider>
              </div>
            </div>,
            <FormField
              className="form-fields"
            >
              <label
                className="label-text label-center"
              >
                Subject Name
              </label>
              <input
                name="subjectName"
                onChange={[Function]}
                style={
                  Object {
                    "borderColor": null,
                  }
                }
                type="text"
                value=""
              />
            </FormField>,
            <FormField
              className="form-fields"
            >
              <label
                className="label-text"
              >
                Subject Description
              </label>
              <input
                name="subjectDesc"
                onChange={[Function]}
                type="text"
                value=""
              />
            </FormField>,
            <FormField
              className="form-fields"
            >
              <label
                className="label-text"
              >
                Default Task Type
              </label>
              <select
                name="defaultTaskType"
                onChange={[Function]}
                value="Assignment"
              >
                <option
                  value="assignment"
                >
                  assignment
                </option>
                <option
                  value="exam"
                >
                  exam
                </option>
              </select>
            </FormField>,
            <Button
              as="button"
              onClick={[Function]}
              primary={true}
              role="button"
              type="button"
              value="Submit"
            >
              Submit
            </Button>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <b>
                  Add Subject
                </b>,
                <div
                  className="switch-icon"
                >
                  <Context.Provider
                    value={
                      Object {
                        "size": 20,
                      }
                    }
                  >
                    <MdRepeat />
                  </Context.Provider>
                </div>,
              ],
              "className": "subject-title-container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Add Subject",
                },
                "ref": null,
                "rendered": "Add Subject",
                "type": "b",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Context.Provider
                    value={
                      Object {
                        "size": 20,
                      }
                    }
                  >
                    <MdRepeat />
                  </Context.Provider>,
                  "className": "switch-icon",
                  "onClick": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <MdRepeat />,
                    "value": Object {
                      "size": 20,
                    },
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": [Circular],
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": null,
                      "_currentRenderer2": null,
                      "_currentValue": Object {
                        "attr": undefined,
                        "className": undefined,
                        "color": undefined,
                        "size": undefined,
                        "style": undefined,
                      },
                      "_currentValue2": Object {
                        "attr": undefined,
                        "className": undefined,
                        "color": undefined,
                        "size": undefined,
                        "style": undefined,
                      },
                      "unstable_read": [Function],
                    },
                  },
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <label
                  className="label-text label-center"
                >
                  Subject Name
                </label>,
                <input
                  name="subjectName"
                  onChange={[Function]}
                  style={
                    Object {
                      "borderColor": null,
                    }
                  }
                  type="text"
                  value=""
                />,
              ],
              "className": "form-fields",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Subject Name",
                  "className": "label-text label-center",
                },
                "ref": null,
                "rendered": "Subject Name",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "name": "subjectName",
                  "onChange": [Function],
                  "style": Object {
                    "borderColor": null,
                  },
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <label
                  className="label-text"
                >
                  Subject Description
                </label>,
                <input
                  name="subjectDesc"
                  onChange={[Function]}
                  type="text"
                  value=""
                />,
              ],
              "className": "form-fields",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Subject Description",
                  "className": "label-text",
                },
                "ref": null,
                "rendered": "Subject Description",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "name": "subjectDesc",
                  "onChange": [Function],
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <label
                  className="label-text"
                >
                  Default Task Type
                </label>,
                <select
                  name="defaultTaskType"
                  onChange={[Function]}
                  value="Assignment"
                >
                  <option
                    value="assignment"
                  >
                    assignment
                  </option>
                  <option
                    value="exam"
                  >
                    exam
                  </option>
                </select>,
              ],
              "className": "form-fields",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Default Task Type",
                  "className": "label-text",
                },
                "ref": null,
                "rendered": "Default Task Type",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <option
                      value="assignment"
                    >
                      assignment
                    </option>,
                    <option
                      value="exam"
                    >
                      exam
                    </option>,
                  ],
                  "name": "defaultTaskType",
                  "onChange": [Function],
                  "value": "Assignment",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "assignment",
                      "value": "assignment",
                    },
                    "ref": null,
                    "rendered": "assignment",
                    "type": "option",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "exam",
                      "value": "exam",
                    },
                    "ref": null,
                    "rendered": "exam",
                    "type": "option",
                  },
                ],
                "type": "select",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "button",
              "children": "Submit",
              "onClick": [Function],
              "primary": true,
              "role": "button",
              "type": "button",
              "value": "Submit",
            },
            "ref": null,
            "rendered": "Submit",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
